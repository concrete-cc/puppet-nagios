# This is an autogenerated function, ported from the original legacy version.
# It /should work/ as is, but will not have all the benefits of the modern
# function API. You should see the function docs to learn how to add function
# signatures for type safety and to document this function using puppet-strings.
#
# https://puppet.com/docs/puppet/latest/custom_functions_ruby.html
#
# ---- original file header ----
#Will generate a password args long from the fqdn (gonna call fqdn_rand to do it)
#Call is of the form generate_password( length, seed) where length is an integer representing the number of characters required, seed is a random seed.
#for example class name.

# ---- original file header ----
#
# @summary
#   Summarise what the function does here
#
Puppet::Functions.create_function(:'generate_password') do
  # @param args
  #   The original array of arguments. Port this to individually managed params
  #   to get the full benefit of the modern function API.
  #
  # @return [Data type]
  #   Describe what the function returns here
  #
  dispatch :default_impl do
    # Call the method named 'default_impl' when this is matched
    # Port this to match individual params for better type safety
    repeated_param 'Any', :args
  end


  def default_impl(*args)
    
			Puppet::Parser::Functions.autoloader.loadall
			length = args[0].to_i
			seed = args[1]
			charnumber = 0
			password = ""
			while charnumber < length do
				randchar = function_fqdn_rand( [ 26, seed + charnumber.to_s ] )
				#This is going to randomise whether its a capital or not.
				if function_fqdn_rand( [ 2, seed + (charnumber + length).to_s ] ).to_i == 1.to_i
					starting = 65
				else
					starting = 97
				end
				randchar = starting + randchar.to_i
				char = randchar.chr
				password = password + char
				charnumber = charnumber + 1
			end
		##return password
		password
		
  end
end
